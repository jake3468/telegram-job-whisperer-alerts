
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://fnzloyyhzhrqsvslhhri.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZuemxveXloemhycXN2c2xoaHJpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg5MzAyMjIsImV4cCI6MjA2NDUwNjIyMn0.xdlgb_amJ1fV31uinCFotGW00isgT5-N8zJ_gLHEKuk";

// Store the current JWT token
let currentJWTToken: string | null = null;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: false, // Disable Supabase auth since we're using Clerk
    autoRefreshToken: false,
  },
  global: {
    headers: {
      get Authorization() {
        return currentJWTToken ? `Bearer ${currentJWTToken}` : undefined;
      }
    }
  }
});

// Function to set Clerk JWT token
export const setClerkToken = async (token: string | null) => {
  try {
    console.log('[setClerkToken] 🔄 Setting Clerk JWT token...');
    
    if (token) {
      currentJWTToken = token;
      console.log('[setClerkToken] ✅ Clerk JWT token set successfully');
      
      // Also set it for realtime if needed
      if (supabase.realtime) {
        supabase.realtime.setAuth(token);
      }
      
      return true;
    } else {
      currentJWTToken = null;
      console.log('[setClerkToken] ❌ Clerk JWT token cleared');
      
      // Clear realtime auth
      if (supabase.realtime) {
        supabase.realtime.setAuth(null);
      }
      
      return true;
    }
  } catch (error) {
    console.error('[setClerkToken] ❌ Error setting Clerk JWT token:', error);
    return false;
  }
};

// Function to get current JWT token for debugging
export const getCurrentJWTToken = () => currentJWTToken;


// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://fnzloyyhzhrqsvslhhri.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZuemxveXloemhycXN2c2xoaHJpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg5MzAyMjIsImV4cCI6MjA2NDUwNjIyMn0.xdlgb_amJ1fV31uinCFotGW00isgT5-N8zJ_gLHEKuk";

// Validate required environment variables
if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  throw new Error('Missing required Supabase configuration. Please check your environment variables.');
}

// Store the current JWT token
let currentJWTToken: string | null = null;

// Create the base Supabase client
const baseClient = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: false, // Disable Supabase auth since we're using Clerk
    autoRefreshToken: false,
  }
});

// Create a proxy handler to intercept and modify requests
const createAuthenticatedClient = () => {
  return new Proxy(baseClient, {
    get(target, prop) {
      const originalMethod = target[prop];
      
      // Intercept methods that make requests
      if (prop === 'from' || prop === 'rpc' || prop === 'storage') {
        return function(...args: any[]) {
          const result = originalMethod.apply(target, args);
          
          // If we have a JWT token, add Authorization header to the request
          if (currentJWTToken && result && typeof result === 'object') {
            // For query builders, intercept the actual request
            if (result.select || result.insert || result.update || result.delete || result.upsert) {
              return new Proxy(result, {
                get(queryTarget, queryProp) {
                  const queryMethod = queryTarget[queryProp];
                  
                  if (typeof queryMethod === 'function') {
                    return function(...queryArgs: any[]) {
                      const queryResult = queryMethod.apply(queryTarget, queryArgs);
                      
                      // If this is the final request execution, add auth header
                      if (queryResult && typeof queryResult.then === 'function') {
                        // Modify the request to include Authorization header
                        const originalRequest = queryResult;
                        
                        // Override the request headers
                        if (queryTarget.headers) {
                          queryTarget.headers['Authorization'] = `Bearer ${currentJWTToken}`;
                        } else {
                          queryTarget.headers = { 'Authorization': `Bearer ${currentJWTToken}` };
                        }
                        
                        console.log('[AuthProxy] üîê Added JWT to request:', prop, queryProp);
                        return originalRequest;
                      }
                      
                      return queryResult;
                    };
                  }
                  
                  return queryMethod;
                }
              });
            }
            
            // For RPC calls, add auth header directly
            if (prop === 'rpc' && currentJWTToken) {
              console.log('[AuthProxy] üîê Adding JWT to RPC call');
              // The RPC call will be made with the JWT token
            }
          }
          
          return result;
        };
      }
      
      return originalMethod;
    }
  });
};

// Create the authenticated Supabase client
export const supabase = createAuthenticatedClient();

// Enhanced function to set Clerk JWT token with direct request interception
export const setClerkToken = async (token: string | null) => {
  try {
    console.log('[setClerkToken] üîÑ Setting Clerk JWT token with direct auth headers...');
    
    if (token) {
      // Validate token format before setting
      const parts = token.split('.');
      if (parts.length !== 3) {
        console.error('[setClerkToken] ‚ùå Invalid JWT format - token does not have 3 parts');
        return false;
      }

      // Try to decode the payload to validate
      try {
        const payload = JSON.parse(atob(parts[1]));
        console.log('[setClerkToken] üîç JWT payload preview:', {
          sub: payload.sub,
          iss: payload.iss,
          aud: payload.aud,
          exp: payload.exp,
          iat: payload.iat,
          role: payload.role
        });
      } catch (e) {
        console.warn('[setClerkToken] ‚ö†Ô∏è Could not decode JWT payload for validation:', e);
      }

      currentJWTToken = token;
      console.log('[setClerkToken] ‚úÖ Clerk JWT token stored for direct header injection');
      
      return true;
    } else {
      currentJWTToken = null;
      console.log('[setClerkToken] ‚ùå Clerk JWT token cleared');
      return true;
    }
  } catch (error) {
    console.error('[setClerkToken] ‚ùå Error setting Clerk JWT token:', error);
    return false;
  }
};

// Function to get current JWT token for debugging
export const getCurrentJWTToken = () => currentJWTToken;

// Enhanced function to test JWT transmission with direct RPC call
export const testJWTTransmission = async () => {
  try {
    console.log('[testJWTTransmission] üß™ Testing JWT transmission with direct auth headers...');
    console.log('[testJWTTransmission] üîë Current token available:', currentJWTToken ? 'YES' : 'NO');
    
    if (currentJWTToken) {
      console.log('[testJWTTransmission] üìù Token preview (first 100 chars):', currentJWTToken.substring(0, 100));
    }
    
    // Make direct RPC call with explicit auth header
    const { data, error } = await baseClient.rpc('debug_user_auth', {}, {
      headers: {
        'Authorization': `Bearer ${currentJWTToken || ''}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('[testJWTTransmission] üìä Test result:', {
      data,
      error,
      currentToken: currentJWTToken ? 'SET' : 'NOT_SET'
    });
    
    if (data && data.length > 0) {
      const result = data[0];
      console.log('[testJWTTransmission] üîç Detailed analysis:', {
        clerkIdFromFunction: result.clerk_id,
        jwtSubFromAuth: result.jwt_sub,
        authRole: result.auth_role,
        userExistsInDB: result.user_exists,
        rawClaims: result.current_setting_claims
      });
    }
    
    return { data, error };
  } catch (error) {
    console.error('[testJWTTransmission] ‚ùå JWT transmission test failed:', error);
    return { data: null, error };
  }
};

// Function to create authenticated storage client
export const createAuthenticatedStorageClient = () => {
  if (!currentJWTToken) {
    console.warn('[createAuthenticatedStorageClient] ‚ö†Ô∏è No JWT token available for storage');
    return supabase.storage;
  }

  console.log('[createAuthenticatedStorageClient] üóÑÔ∏è Using authenticated storage client');
  return supabase.storage;
};

// Enhanced function to make authenticated requests
export const makeAuthenticatedRequest = async (operation: () => Promise<any>) => {
  if (!currentJWTToken) {
    console.warn('[makeAuthenticatedRequest] ‚ö†Ô∏è No JWT token available');
    return operation();
  }
  
  console.log('[makeAuthenticatedRequest] üîê Making authenticated request with JWT');
  return operation();
};

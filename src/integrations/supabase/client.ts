
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://fnzloyyhzhrqsvslhhri.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZuemxveXloemhycXN2c2xoaHJpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg5MzAyMjIsImV4cCI6MjA2NDUwNjIyMn0.xdlgb_amJ1fV31uinCFotGW00isgT5-N8zJ_gLHEKuk";

// Validate required environment variables
if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  throw new Error('Missing required Supabase configuration. Please check your environment variables.');
}

// Store the current JWT token
let currentJWTToken: string | null = null;

// Create the Supabase client with simpler configuration
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: false,
    autoRefreshToken: false,
  },
  global: {
    headers: {}
  }
});

// Function to set Clerk JWT token  
export const setClerkToken = async (token: string | null) => {
  try {
    console.log('[setClerkToken] üîÑ Setting Clerk JWT token...');
    
    if (token) {
      // Validate token format before setting
      const parts = token.split('.');
      if (parts.length !== 3) {
        console.error('[setClerkToken] ‚ùå Invalid JWT format - token does not have 3 parts');
        return false;
      }

      // Try to decode the payload to validate
      try {
        const payload = JSON.parse(atob(parts[1]));
        console.log('[setClerkToken] üîç JWT payload preview:', {
          sub: payload.sub,
          iss: payload.iss,
          aud: payload.aud,
          exp: payload.exp,
          iat: payload.iat,
          role: payload.role
        });
      } catch (e) {
        console.warn('[setClerkToken] ‚ö†Ô∏è Could not decode JWT payload for validation:', e);
      }

      currentJWTToken = token;
      
      // Update the global headers to include Authorization
      if (supabase.rest && supabase.rest.headers) {
        supabase.rest.headers['Authorization'] = `Bearer ${token}`;
      }
      
      console.log('[setClerkToken] ‚úÖ Clerk JWT token stored and headers updated');
      return true;
    } else {
      currentJWTToken = null;
      
      // Remove Authorization header
      if (supabase.rest && supabase.rest.headers) {
        delete supabase.rest.headers['Authorization'];
      }
      
      console.log('[setClerkToken] ‚ùå Clerk JWT token cleared');
      return true;
    }
  } catch (error) {
    console.error('[setClerkToken] ‚ùå Error setting Clerk JWT token:', error);
    return false;
  }
};

// Function to get current JWT token for debugging
export const getCurrentJWTToken = () => currentJWTToken;

// Function to test JWT transmission with direct RPC call
export const testJWTTransmission = async () => {
  try {
    console.log('[testJWTTransmission] üß™ Testing JWT transmission...');
    console.log('[testJWTTransmission] üîë Current token available:', currentJWTToken ? 'YES' : 'NO');
    
    if (currentJWTToken) {
      console.log('[testJWTTransmission] üìù Token preview (first 100 chars):', currentJWTToken.substring(0, 100));
    }
    
    // Make direct RPC call 
    const { data, error } = await supabase.rpc('debug_user_auth');
    
    console.log('[testJWTTransmission] üìä Test result:', {
      data,
      error,
      currentToken: currentJWTToken ? 'SET' : 'NOT_SET'
    });
    
    if (data && data.length > 0) {
      const result = data[0];
      console.log('[testJWTTransmission] üîç Detailed analysis:', {
        clerkIdFromFunction: result.clerk_id,
        jwtSubFromAuth: result.jwt_sub,
        authRole: result.auth_role,
        userExistsInDB: result.user_exists,
        rawClaims: result.current_setting_claims
      });
    }
    
    return { data, error };
  } catch (error) {
    console.error('[testJWTTransmission] ‚ùå JWT transmission test failed:', error);
    return { data: null, error };
  }
};

// Function to create authenticated storage client
export const createAuthenticatedStorageClient = () => {
  if (!currentJWTToken) {
    console.warn('[createAuthenticatedStorageClient] ‚ö†Ô∏è No JWT token available for storage');
    return supabase.storage;
  }

  console.log('[createAuthenticatedStorageClient] üóÑÔ∏è Using authenticated storage client');
  return supabase.storage;
};

// Function to make authenticated requests with proper error handling
export const makeAuthenticatedRequest = async <T>(operation: () => Promise<T>): Promise<T> => {
  if (!currentJWTToken) {
    console.warn('[makeAuthenticatedRequest] ‚ö†Ô∏è No JWT token available');
  } else {
    console.log('[makeAuthenticatedRequest] üîê Making authenticated request with JWT');
  }
  
  return await operation();
};


name: Auto Create Production PR

on:
  push:
    branches: [ main ]

jobs:
  create-production-pr:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Check if sync commit
        id: check-sync-commit
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          echo "commit_message=$COMMIT_MESSAGE"
          if [[ "$COMMIT_MESSAGE" == *"Merge remote-tracking branch 'origin/production'"* ]] || [[ "$COMMIT_MESSAGE" == *"Syncing main branch with production"* ]] || [[ "$COMMIT_MESSAGE" == *"sync"* ]] || [[ "$COMMIT_MESSAGE" == *"Sync"* ]]; then
            echo "is_sync_commit=true" >> $GITHUB_OUTPUT
            echo "üîÑ Detected sync commit, skipping PR creation"
          else
            echo "is_sync_commit=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Regular commit, proceeding with PR workflow"
          fi
      
      - name: Check if PR already exists
        if: steps.check-sync-commit.outputs.is_sync_commit != 'true'
        id: check-pr
        run: |
          PR_EXISTS=$(gh pr list --base production --head main --json number --jq length)
          echo "pr_exists=$PR_EXISTS" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check branch sync status
        if: steps.check-sync-commit.outputs.is_sync_commit != 'true'
        id: check-sync
        run: |
          git fetch --all
          MAIN_BEHIND=$(git rev-list --count origin/main..origin/production)
          echo "main_behind=$MAIN_BEHIND" >> $GITHUB_OUTPUT
          
          if [ "$MAIN_BEHIND" -gt 0 ]; then
            echo "‚ö†Ô∏è Main branch is $MAIN_BEHIND commits behind production"
            echo "This may cause merge conflicts"
          else
            echo "‚úÖ Branches are in sync"
          fi
      
      - name: Create Pull Request to Production
        if: steps.check-sync-commit.outputs.is_sync_commit != 'true' && steps.check-pr.outputs.pr_exists == '0'
        run: |
          SYNC_WARNING=""
          if [ "${{ steps.check-sync.outputs.main_behind }}" -gt 0 ]; then
            SYNC_WARNING="
          ## ‚ö†Ô∏è Branch Sync Warning
          Main branch is ${{ steps.check-sync.outputs.main_behind }} commits behind production. This may cause conflicts.
          Run the Emergency Branch Sync workflow if needed.
          "
          fi
          
          gh pr create \
            --base production \
            --head main \
            --title "üöÄ Deploy to Production - $(date +'%Y-%m-%d %H:%M')" \
            --body "
          ## üìã Production Deployment

          This PR contains the latest changes from the main branch ready for production deployment.
          ${SYNC_WARNING}
          ### üîç What's Changed
          - Latest features and fixes from main branch
          - All changes have been tested in development environment

          ### ‚úÖ Pre-deployment Checklist
          - [ ] Review all changes in this PR
          - [ ] Verify environment variables are set correctly in production
          - [ ] Confirm database migrations (if any) are ready
          - [ ] Check that external integrations are configured for production

          ### üöÄ Deployment Process
          Once this PR is merged:
          1. Netlify will automatically deploy from the production branch
          2. Main branch will automatically sync with production
          3. Production environment variables will be used
          4. The live site will be updated

          **Note:** Only merge this PR when you're ready to deploy to production!
          " \
            --label "deployment" \
            --label "production"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Comment on existing PR
        if: steps.check-sync-commit.outputs.is_sync_commit != 'true' && steps.check-pr.outputs.pr_exists != '0'
        run: |
          PR_NUMBER=$(gh pr list --base production --head main --json number --jq '.[0].number')
          gh pr comment $PR_NUMBER --body "üîÑ New changes pushed to main branch at $(date +'%Y-%m-%d %H:%M UTC')"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
